#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 28 19:56:56 2022

@author: karan
"""

'''
See the Fog data generated by MOSDAC and validate/compare it with our algorithm.
Comparing Operational FOG Product output with the output of our algorithm.
'''

# importing necessary libraries
import h5py
import numpy as np
import matplotlib.pyplot as plt
import os
import glob
import pandas as pd

DATE = "26Jan2021"

print("[DATE] " + DATE)

# Operational Product
OPERATIONAL_PRODUCT_DIR = "/home/karan/Jan2021_Fog_Product_merged/" + DATE + "_Fog"

# Our Product
OUR_PRODUCT_DIR = "/media/karan/Studyzz/CHANGA/SEM 8/00Jan_Final_Output/" + DATE + "_output"
# Load the .h5 file
our_product_file = h5py.File(name=glob.glob(OUR_PRODUCT_DIR + "/*.h5")[0], mode="r")

for operational_product_filepath in sorted(glob.glob(OPERATIONAL_PRODUCT_DIR + "/*.h5")):
    # Operational Product

    # Load the .h5 file
    operational_product_file = h5py.File(name=operational_product_filepath, mode='r')
    # get the file_name from the input_data.
    operational_product_filename = os.path.basename(operational_product_filepath).split(".")[0]

    # Generate image for FOG channel
    operational_product_fog = operational_product_file["FOG"]
    # Convert the data to a numpy matrix
    operational_product_fog = np.array(operational_product_fog)
    operational_product_fog = operational_product_fog[0, :, :]
    operational_product_fog[operational_product_fog == -128] = 0
    # Cropping to keep only the Indian region.
    operational_product_fog = operational_product_fog[300:1192+1, 623:1391+1]

    operational_product_file.close()

    ############################################################################

    # Our Product

    # derive a key from operational_product_filename to be used as a key in our product data.
    our_product_key = operational_product_filename.split("_")[0:3]
    our_product_key.extend(['L1C', 'ASIA', 'MER'])
    our_product_key = "_".join(our_product_key)

    # Extract the value using the key. Value means fog_data.
    our_product_value = our_product_file[our_product_key]
    # Convert the data to a numpy matrix
    our_product_value = np.array(our_product_value)
    # convert our_product data to binary format: 0 or 1.
    our_product_value[our_product_value != 0] = 1

    ############################################################################
    if not os.path.exists(os.path.sep.join([OUR_PRODUCT_DIR, "/fog_validation_plots_" + DATE])):
        os.mkdir(os.path.sep.join([OUR_PRODUCT_DIR, "/fog_validation_plots_" + DATE]))
    ############################################################################

    # Creating subplot comparing "Operational Product" and "Our Product"
        
    fig = plt.figure(figsize=(10, 5), dpi=150)
    
    plt.subplot(1, 2, 1)
    plt.imshow(X=operational_product_fog, cmap='gray')
    # plt.colorbar(label="Reflectance (%)")
    plt.title(label="Operational Product")
    # plt.xticks([]); plt.yticks([]);

    plt.subplot(1, 2, 2);
    plt.imshow(X=our_product_value, cmap='gray')
    # plt.colorbar(label="Reflectance (%)")
    plt.title(label="Our Output")
    # plt.xticks([]); plt.yticks([]);
    
    plt.suptitle(t=operational_product_filename)
    plt.savefig(OUR_PRODUCT_DIR + "/fog_validation_plots_" + DATE + "/" + our_product_key + ".png", bbox_inches='tight')
    # plt.show()
    plt.close()

our_product_file.close()

print("[INFO] Fog Validation Completed.")



############################################################################
############################################################################
############################################################################
############################################################################


'''
Generate plot for adding in the Final Report.
See the Fog data generated by MOSDAC and validate/compare it with our algorithm.
Comparing Operational FOG Product output with the output of our algorithm.
'''

# # importing necessary libraries
# import h5py
# import numpy as np
# import matplotlib.pyplot as plt
# import os
# import glob
# import pandas as pd

# DATE = "15Jan2021"

# print("[DATE] " + DATE)

# # Operational Product
# OPERATIONAL_PRODUCT_DIR = "/home/karan/Jan2021_Fog_Product_merged/" + DATE + "_Fog"

# # Our Product
# OUR_PRODUCT_DIR = "/media/karan/Studyzz/CHANGA/SEM 8/00Jan_Final_Output/" + DATE + "_output"
# # Load the .h5 file
# our_product_file = h5py.File(name=glob.glob(OUR_PRODUCT_DIR + "/" + DATE + ".h5")[0], mode="r")

# def add_boundary(data_1):
#     from mpl_toolkits.basemap import Basemap
#     map = Basemap(projection='merc', 
#                llcrnrlon=68,    # lower left corner longitude
#                llcrnrlat=6,     # lower left corner latitude
#                urcrnrlon=97,    # upper right corner longitude
#                urcrnrlat=37,    # upper right corner latitude
#                resolution='l',  # low resolution
#               )
#     map.drawmapboundary(color="k", linewidth=0.5) # Frame 
#     # map.drawcoastlines(color="k", linewidth=0.5) # Coastline
#     # map.drawcountries(color="k", linewidth=0.5)
#     map.readshapefile(shapefile="/media/karan/Studyzz/CHANGA/SEM 8/India_Sate_Boundary_EPSG_4326/India_Sate_Boundary_EPSG_4326",
#                       name="India_Sate_Boundary_EPSG_4326",
#                       # drawbounds=True,
#                       # ax=None,
#                       # zorder=None,
#                       linewidth=0.5,
#                       color="gray"
#                       ) # Boundary around India and its states
#     x = np.linspace(0, map.urcrnrx, data_1.shape[1])
#     y = np.linspace(0, map.urcrnry, data_1.shape[0])
#     xx, yy = np.meshgrid(x, y)
#     temp = np.flipud(data_1)
    
#     map.pcolormesh(xx, yy, temp, cmap="binary", shading='auto')


# for operational_product_filepath in sorted(glob.glob(OPERATIONAL_PRODUCT_DIR + "/*.h5")):

#     # Operational Product

#     # Load the .h5 file
#     operational_product_file = h5py.File(name=operational_product_filepath, mode='r')
#     # get the file_name from the input_data.
#     operational_product_filename = os.path.basename(operational_product_filepath).split(".")[0]

#     # Generate image for FOG channel
#     operational_product_fog = operational_product_file["FOG"]
#     # Convert the data to a numpy matrix
#     operational_product_fog = np.array(operational_product_fog)
#     operational_product_fog = operational_product_fog[0, :, :]
#     operational_product_fog[operational_product_fog == -128] = 0
#     # Cropping to keep only the Indian region.
#     operational_product_fog = operational_product_fog[300:1192+1, 623:1391+1]

#     operational_product_file.close()

#     ############################################################################

#     # # Our Product

#     # # derive a key from operational_product_filename to be used as a key in our product data.
#     # our_product_key = operational_product_filename.split("_")[0:3]
#     # our_product_key.extend(['L1C', 'ASIA', 'MER'])
#     # our_product_key = "_".join(our_product_key)

#     # # Extract the value using the key. Value means fog_data.
#     # our_product_value = our_product_file[our_product_key]
#     # # Convert the data to a numpy matrix
#     # our_product_value = np.array(our_product_value)
#     # # convert our_product data to binary format: 0 or 1.
#     # our_product_value[our_product_value != 0] = 1

#     ############################################################################
#     if not os.path.exists(os.path.sep.join([OUR_PRODUCT_DIR, "/fog_validation_plots_with_india_boundary_" + DATE])):
#         os.mkdir(os.path.sep.join([OUR_PRODUCT_DIR, "/fog_validation_plots_with_india_boundary_" + DATE]))
#     ############################################################################

#     # Creating subplot comparing "Operational Product" and "Our Product"
    
#     fig = plt.figure(dpi=150)
#     dpi = fig.get_dpi()
#     w = operational_product_fog.shape[1] / float(dpi)
#     h = operational_product_fog.shape[0] / float(dpi)
#     fig.set_size_inches(w, h)
#     # To make the content fill the whole figure
#     ax = plt.Axes(fig, [0., 0., 1., 1.])
#     # ax.set_axis_off()
#     fig.add_axes(ax)

#     title = "_".join(operational_product_filename.split("_")[1:3]) + "UTC"
#     ax.text(0.5, 0.85, title, color='black', fontsize='large', fontweight="roman", 
#             fontstretch="normal", transform=ax.transAxes)

#     add_boundary(operational_product_fog)    
#     # plt.imshow(X=operational_product_fog, cmap='binary')
#     # plt.colorbar(label="Reflectance (%)")
#     # plt.title(label="Operational Product")

#     # Then draw your image on it :
#     # ax.imshow(operational_product_fog, cmap='binary', aspect='auto')
#     # plt.title(label=operational_product_filename)
#     # plt.xticks([]); plt.yticks([]);
#     # fig.savefig(SAVE_FIG_DIR + "/" + file_name + "_2.png", bbox_inches='tight')    
#     plt.savefig(OUR_PRODUCT_DIR + "/fog_validation_plots_with_india_boundary_" + DATE + "/" + operational_product_filename + ".png", bbox_inches='tight')

#     plt.show()
#     plt.close()

# our_product_file.close()

# print("[INFO] Fog Validation Completed.")










































